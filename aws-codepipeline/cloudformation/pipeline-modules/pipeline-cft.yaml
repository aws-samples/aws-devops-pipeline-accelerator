Parameters:
  ArtifactsBucket:
    Type: String
    Description: Name of the repo where the pipeline artifacts to be updated contains.
    Default: "code-pipeline-cft"
  EcrDockerRepository:
    Type: String
    Description: ECR Docker Repositry Name
    Default: "cft-base:3"
  CodeCommitAppRepo:
    Type: String
    Description: CodeCommit Repositry Name
    Default: "additional-repo"
  CodeCommitBaseRepo:
    Type: String
    Description: CodeCommit Repositry Name
    Default: "codestack-poc"
  CodeCommitRepoBranch:
    Type: String
    Description: CodeCommit Repositry Branch Name
    Default: "master"
  SNSMailAddress:
    Type: String
    Description: email address to receive SNS notification
    Default: "email@amazon.com"

Resources:
  # CodeCommit repository
  # NewCodeCommitRepo:
  #   Type: "AWS::CodeCommit::Repository"
  #   Properties:
  #     RepositoryName: !Ref CodeCommitRepo
  
  # CodeBuild project
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription: 
        - Endpoint: !Ref SNSMailAddress
          Protocol: email
      TopicName: !Sub "pipeline-approval-${AWS::StackName}"
  Init:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub "Init-${AWS::StackName}"
      Description: "CFN lint"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
        ImagePullCredentialsType: "SERVICE_ROLE"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: "ARTIFACTS_BUCKET"
            Value: !Ref ArtifactsBucket
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: "cfn-lint-buildspec.yaml"
  # Build:
  #   Type: "AWS::CodeBuild::Project"
  #   Properties:
  #     Name: !Sub "Build-${AWS::StackName}"
  #     Description: "CFN Nag"
  #     ServiceRole: !GetAtt CodeBuildServiceRole.Arn
  #     Artifacts:
  #       Type: "CODEPIPELINE"
  #     Environment:
  #       ComputeType: "BUILD_GENERAL1_SMALL"
  #       Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
  #       ImagePullCredentialsType: "SERVICE_ROLE"
  #       Type: "LINUX_CONTAINER"
  #       EnvironmentVariables:
  #         - Name: "ARTIFACTS_BUCKET"
  #           Value: !Ref ArtifactsBucket
  #     Source:
  #       Type: "CODEPIPELINE"
  #       BuildSpec: "buildspec.yaml"
  Test:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub "Test-${AWS::StackName}"
      Description: "CFN Nag"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
        ImagePullCredentialsType: "SERVICE_ROLE"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: "ARTIFACTS_BUCKET"
            Value: !Ref ArtifactsBucket
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: "cfn-nag-buildspec.yaml"
  # Verify:
  #   Type: "AWS::CodeBuild::Project"
  #   Properties:
  #     Name: !Sub "Verify-${AWS::StackName}"
  #     Description: "Builds the MyJavaApp Java application"
  #     ServiceRole: !GetAtt CodeBuildServiceRole.Arn
  #     Artifacts:
  #       Type: "CODEPIPELINE"
  #     Environment:
  #       ComputeType: "BUILD_GENERAL1_SMALL"
  #       Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
  #       ImagePullCredentialsType: "SERVICE_ROLE"
  #       Type: "LINUX_CONTAINER"
  #       EnvironmentVariables:
  #         - Name: "ARTIFACTS_BUCKET"
  #           Value: !Ref ArtifactsBucket
  #     Source:
  #       Type: "CODEPIPELINE"
  #       BuildSpec: "buildspec.yaml"
  CreateInfra:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub "CreateInfra-${AWS::StackName}"
      Description: "Deploy the stack"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
        ImagePullCredentialsType: "SERVICE_ROLE"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: "ARTIFACTS_BUCKET"
            Value: !Ref ArtifactsBucket
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: "create-infra-buildspec.yaml" 
  DeleteInfra:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub "DeleteInfra-${AWS::StackName}"
      Description: "Destroy the stack"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
        ImagePullCredentialsType: "SERVICE_ROLE"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: "ARTIFACTS_BUCKET"
            Value: !Ref ArtifactsBucket
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: "delete-infra-buildspec.yaml" 


  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodePipeline ] ]
  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "devops_pipeline_accelerator-${AWS::StackName}"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodeCommitAppRepo ] ]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref CodeCommitRepoBranch
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodePipeline ] ]
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: codepipeline-AppPipeline


  # CodePipeline pipeline
  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub "devops_pipeline_accelerator-${AWS::StackName}"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: "S3"
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: "Source"
          Actions:
            - Name: "Source"
              ActionTypeId:
                Category: "Source"
                Owner: "AWS"
                Provider: "CodeCommit"
                Version: "1"
              OutputArtifacts:
                - Name: "SourceOutput"
              Configuration:
                RepositoryName: !Ref CodeCommitBaseRepo
                BranchName: !Ref CodeCommitRepoBranch
                PollForSourceChanges: false
            - Name: "Source1"
              ActionTypeId:
                Category: "Source"
                Owner: "AWS"
                Provider: "CodeCommit"
                Version: "1"
              OutputArtifacts:
                - Name: "SourceOutput1"
              Configuration:
                RepositoryName: !Ref CodeCommitAppRepo
                BranchName: !Ref CodeCommitRepoBranch  
                PollForSourceChanges: false

        - Name: "Init"
          Actions:
            - Name: Init
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              InputArtifacts:
                - Name: "SourceOutput"
                - Name: "SourceOutput1" 
              # OutputArtifacts:
              #   - Name: "BuildOutput"
              Configuration:
                ProjectName: !Ref Init
                PrimarySource: "SourceOutput"
        # - Name: "Build"
        #   Actions:
        #     - Name: Build
        #       ActionTypeId:
        #         Category: "Build"
        #         Owner: "AWS"
        #         Provider: "CodeBuild"
        #         Version: "1"
        #       InputArtifacts:
        #         - Name: "SourceOutput"
        #         - Name: "SourceOutput1"  
        #       OutputArtifacts:
        #         - Name: "BuildOutput"
        #       Configuration:
        #         ProjectName: !Ref Build
        #         PrimarySource: "SourceOutput"
        - Name: "Test"
          Actions:
            - Name: Test
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              InputArtifacts:
                - Name: "SourceOutput"
                - Name: "SourceOutput1"
              # OutputArtifacts:
              #   - Name: "BuildOutput"
              Configuration:
                ProjectName: !Ref Test
                PrimarySource: "SourceOutput"
        # - Name: "Verify"
        #   Actions:
        #     - Name: Verify
        #       ActionTypeId:
        #         Category: "Build"
        #         Owner: "AWS"
        #         Provider: "CodeBuild"
        #         Version: "1"
        #       InputArtifacts:
        #         - Name: "SourceOutput"
        #         - Name: "SourceOutput1"
        #       # OutputArtifacts:
        #       #   - Name: "BuildOutput"
        #       Configuration:
        #         ProjectName: !Ref Verify
        #         PrimarySource: "SourceOutput"
        - Name: Approval
          Actions:
            - Name: Approval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              Configuration:
                NotificationArn: !Ref Topic
              InputArtifacts: []
              OutputArtifacts: []
              RunOrder: 1
        - Name: "CreateInfra"
          Actions:
            - Name: CreateInfra
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              InputArtifacts:
                - Name: "SourceOutput"
                - Name: "SourceOutput1"
              OutputArtifacts:
                - Name: "CreateInfraOutput"
              Configuration:
                ProjectName: !Ref CreateInfra
                PrimarySource: "SourceOutput"
        - Name: "DeleteInfra"
          Actions:
            - Name: DeleteInfra
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              InputArtifacts:
                - Name: "SourceOutput"
                - Name: "SourceOutput1"
              OutputArtifacts:
                - Name: "DeleteInfraOutput"
              Configuration:
                ProjectName: !Ref DeleteInfra
                PrimarySource: "SourceOutput"


  # IAM roles
  CodeBuildServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "CodeBuildServiceRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "CodeBuildServicePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:AbortMultipartUpload"
                  - "s3:DeleteObject"
                  - "s3:ListMultipartUploadParts"
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactsBucket}/*"
              - Resource: 
                  - !Sub "arn:aws:s3:::${ArtifactsBucket}"
                Effect: Allow
                Action: 
                  - "s3:GetBucketLocation"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Resource: "*"
                Effect: Allow
                Action: 
                  - ecr:*
              - Resource: "*"
                Effect: Allow
                Action: 
                  - sts:*
              - Resource: "*"
                Effect: Allow
                Action: 
                  - cloudformation:*
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref Topic
  CodePipelineServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "CodePipelineServiceRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "CodePipelineServicePolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: 
                  - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitBaseRepo}
                  - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitAppRepo}
                Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:ListRepositories
                  - codecommit:GetRepository
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
              - Resource:
                  - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Init}
#                 - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Build}
                  - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Test}
#                 - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Verify}
                  - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CreateInfra}
                  - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${DeleteInfra}
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
              - Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepository}
                Effect: Allow
                Action:
                  - ecr:DescribeImages
              - Resource: !Sub arn:${AWS::Partition}:s3:::${ArtifactsBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action: 
                  - ecr:*