version: "0.2"
env:
  git-credential-helper: "yes"
  shell: bash
  
phases:
  install:
    commands:
      - yum install jq -y
  pre_build:
    commands:
      - PIPELINE_CONFIG_JSON=$CODEBUILD_SRC_DIR_SourceOutput1/entrypoint/terraform-infrastructure.json
      - PROD_DEPLOY_ACCOUNT=$( cat $PIPELINE_CONFIG_JSON | jq -r '.account')
      - TARGET_ROLENAME=$( cat $PIPELINE_CONFIG_JSON | jq -r '.roleName')
      - PROD_DEPLOY_REGION=$( cat $PIPELINE_CONFIG_JSON | jq -r '.targetregion')
      - bucket=$( cat $PIPELINE_CONFIG_JSON | jq -r '.bucket')
      - dynamodb_table=$( cat $PIPELINE_CONFIG_JSON | jq -r '.dynamodb_table')
      - key=$( cat $PIPELINE_CONFIG_JSON | jq -r '.key')
      - region=$( cat $PIPELINE_CONFIG_JSON | jq -r '.region')
      - export PROD_DEPLOY_ACCOUNT=$PROD_DEPLOY_ACCOUNT
      - export TARGET_ROLENAME=$TARGET_ROLENAME
      - echo $PROD_DEPLOY_ACCOUNT
      - echo $TARGET_ROLENAME
      - ASSUME_ROLE_ARN=arn:aws:iam::$PROD_DEPLOY_ACCOUNT:role/$TARGET_ROLENAME
      - echo $ASSUME_ROLE_ARN
      # - CREDS=$(aws sts assume-role --role-arn $ASSUME_ROLE_ARN --role-session-name $(date '+%Y%m%d%H%M%S%3N') --duration-seconds 3600 --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' --output text)
      # - export PROFILE=target
      # - aws configure --profile $PROFILE set region "$PROD_DEPLOY_REGION"
      # - aws configure --profile $PROFILE set output "json"
      # - aws configure --profile $PROFILE set aws_secret_access_key "$(echo $CREDS | cut -d' ' -f2)"
      # - aws configure --profile $PROFILE set aws_access_key_id "$(echo $CREDS | cut -d' ' -f1)"
      # - aws configure --profile $PROFILE set aws_session_token "$(echo $CREDS | cut -d' ' -f3)"   

  build:
    commands:
      - echo "Check The envType"
      - echo "${CODEBUILD_SRC_DIR}" #Base repo, IAC code
      - echo "${CODEBUILD_SRC_DIR_SourceOutput1}" #DBM repo, DBM code
      - "cd ${CODEBUILD_SRC_DIR_SourceOutput1}"
      - ls -lrt
      - |
        stage_required=$( jq -r '.deploytoprod_stage_required' entrypoint/terraform-infrastructure.json )
        if [ $stage_required == "false" ]; then
          echo "skipping DEPLOY stage....."
          exit 0
        else
          terraform init -lock=false -backend-config="role_arn=$ASSUME_ROLE_ARN" \
            -backend-config="bucket=$bucket" \
            -backend-config="dynamodb_table=$dynamodb_table" \
            -backend-config="key=$key" \
            -backend-config="region=$region" \
            -backend-config="encrypt=false"
          ls -lart
          terraform apply --auto-approve
        fi